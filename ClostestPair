#include <ctime>
#include <cmath>
#include <iostream>
#include <algorithm>

using namespace std;

#define COORDINATE_RANGE 100.0    // 横纵坐标范围为[-100,100]
#define UNLIMIT 65535
typedef struct Point
{// 二维坐标上的点Point
	double x;
	double y;
}Point;

double Distance(Point a, Point b)
{//平面上任意两点对之间的距离公式计算
	return sqrt((a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y));
}

bool compareX(Point a, Point b) {
	return a.x < b.x;
}

bool compareY(Point a, Point b) {
	return a.y < b.y;
}

double ClosestPair(Point points[], int length, Point &a, Point &b) {
	double distance;//最近点距离
	double d1, d2;//子集最小点距离
	Point a1, b1, a2, b2;
	if (length < 2) {
		return UNLIMIT;
	}
	else if (length == 2) {
		a = points[0];
		b = points[1];
		distance = Distance(points[0], points[1]);
	}
	else
	{
		Point *part1 = new Point[length];//两个子集
		Point *part2 = new Point[length];

		sort(points, points + length, compareX);//排序

		double mid = points[(length - 1) / 2].x;

		for (int i = 0; i < length / 2; i++) {
			part1[i] = points[i];
		}
		for (int i = length / 2,  j = 0; i < length; i++) {
			part2[j] = points[i];
			j++;
		}

		d1 = ClosestPair(part1, length / 2, a1, b1);

		d2 = ClosestPair(part2, length - length / 2, a2, b2);

		if (d1 < d2) {
			distance = d1; a = a1; b = b1;
		}
		else {
			distance = d2; a = a2; b = b2;
		}

		//合并
		Point *ptr = new Point[length];
		int n = 0;
		for (int i = 0; i < length; i++) {
			if (abs(points[i].x - mid) < distance) {
				ptr[n] = points[i];
				n++;
			}
		}

		sort(ptr, ptr + n, compareY);

		for (int i = 0; i < n; i++) {
			for (int j = i + 1; j <=( i + 7) && j < n; j++) {
				if (Distance(ptr[i], ptr[j]) < distance) {
					distance = Distance(ptr[i], ptr[j]);
					a = ptr[i];
					b = ptr[j];
				}
			}
		}
	}
	return distance;
}


void SetPoints(Point *points, int length)//二维点进行初始化
{
	srand(unsigned(time(NULL)));
	for (int i = 0; i < length; i++)
	{
		points[i].x = (rand() % int(COORDINATE_RANGE * 200)) / COORDINATE_RANGE - COORDINATE_RANGE;
		points[i].y = (rand() % int(COORDINATE_RANGE * 200)) / COORDINATE_RANGE - COORDINATE_RANGE;
	}
}

int main()
{
	int num;            //随机生成的点对个数
	Point a, b;            //最近点对
	double diatance;    //点对距离

	cout << "请输入二维点对个数:";
	cin >> num;
	if (num < 2)
		cout << "请输入大于等于2的点个数！！" << endl;
	else
	{
		cout << endl << "随机生成的" << num << "个二维点对如下：" << endl;
		Point *points = new Point[num];
		SetPoints(points, num);
		for (int i = 0; i < num; i++)
			cout << "(" << points[i].x << "," << points[i].y << ")" << endl;
		diatance = ClosestPair(points, num, a, b);
		cout << endl << "最近点对为：" << "(" << a.x << "," << a.y << ")和" << "(" << b.x << "," << b.y << ")" << endl << "最近点对距离为：" << diatance << endl;
	}
}


